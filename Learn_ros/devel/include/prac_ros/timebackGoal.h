// Generated by gencpp from file prac_ros/timebackGoal.msg
// DO NOT EDIT!


#ifndef PRAC_ROS_MESSAGE_TIMEBACKGOAL_H
#define PRAC_ROS_MESSAGE_TIMEBACKGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prac_ros
{
template <class ContainerAllocator>
struct timebackGoal_
{
  typedef timebackGoal_<ContainerAllocator> Type;

  timebackGoal_()
    : dish_count(0)  {
    }
  timebackGoal_(const ContainerAllocator& _alloc)
    : dish_count(0)  {
  (void)_alloc;
    }



   typedef int32_t _dish_count_type;
  _dish_count_type dish_count;





  typedef boost::shared_ptr< ::prac_ros::timebackGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prac_ros::timebackGoal_<ContainerAllocator> const> ConstPtr;

}; // struct timebackGoal_

typedef ::prac_ros::timebackGoal_<std::allocator<void> > timebackGoal;

typedef boost::shared_ptr< ::prac_ros::timebackGoal > timebackGoalPtr;
typedef boost::shared_ptr< ::prac_ros::timebackGoal const> timebackGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prac_ros::timebackGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prac_ros::timebackGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prac_ros::timebackGoal_<ContainerAllocator1> & lhs, const ::prac_ros::timebackGoal_<ContainerAllocator2> & rhs)
{
  return lhs.dish_count == rhs.dish_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prac_ros::timebackGoal_<ContainerAllocator1> & lhs, const ::prac_ros::timebackGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prac_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prac_ros::timebackGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prac_ros::timebackGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prac_ros::timebackGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prac_ros::timebackGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prac_ros::timebackGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prac_ros::timebackGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prac_ros::timebackGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "504f457a172a93818f1eb3d89ab1a81a";
  }

  static const char* value(const ::prac_ros::timebackGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x504f457a172a9381ULL;
  static const uint64_t static_value2 = 0x8f1eb3d89ab1a81aULL;
};

template<class ContainerAllocator>
struct DataType< ::prac_ros::timebackGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prac_ros/timebackGoal";
  }

  static const char* value(const ::prac_ros::timebackGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prac_ros::timebackGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 dish_count\n"
;
  }

  static const char* value(const ::prac_ros::timebackGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prac_ros::timebackGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dish_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct timebackGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prac_ros::timebackGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prac_ros::timebackGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "dish_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dish_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRAC_ROS_MESSAGE_TIMEBACKGOAL_H
