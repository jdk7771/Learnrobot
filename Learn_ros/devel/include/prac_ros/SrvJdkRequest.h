// Generated by gencpp from file prac_ros/SrvJdkRequest.msg
// DO NOT EDIT!


#ifndef PRAC_ROS_MESSAGE_SRVJDKREQUEST_H
#define PRAC_ROS_MESSAGE_SRVJDKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prac_ros
{
template <class ContainerAllocator>
struct SrvJdkRequest_
{
  typedef SrvJdkRequest_<ContainerAllocator> Type;

  SrvJdkRequest_()
    : words()  {
    }
  SrvJdkRequest_(const ContainerAllocator& _alloc)
    : words(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _words_type;
  _words_type words;





  typedef boost::shared_ptr< ::prac_ros::SrvJdkRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prac_ros::SrvJdkRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SrvJdkRequest_

typedef ::prac_ros::SrvJdkRequest_<std::allocator<void> > SrvJdkRequest;

typedef boost::shared_ptr< ::prac_ros::SrvJdkRequest > SrvJdkRequestPtr;
typedef boost::shared_ptr< ::prac_ros::SrvJdkRequest const> SrvJdkRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prac_ros::SrvJdkRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prac_ros::SrvJdkRequest_<ContainerAllocator1> & lhs, const ::prac_ros::SrvJdkRequest_<ContainerAllocator2> & rhs)
{
  return lhs.words == rhs.words;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prac_ros::SrvJdkRequest_<ContainerAllocator1> & lhs, const ::prac_ros::SrvJdkRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prac_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prac_ros::SrvJdkRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prac_ros::SrvJdkRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prac_ros::SrvJdkRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f897d3845272d18053a750c1cfb862a";
  }

  static const char* value(const ::prac_ros::SrvJdkRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f897d3845272d18ULL;
  static const uint64_t static_value2 = 0x053a750c1cfb862aULL;
};

template<class ContainerAllocator>
struct DataType< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prac_ros/SrvJdkRequest";
  }

  static const char* value(const ::prac_ros::SrvJdkRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string words\n"
;
  }

  static const char* value(const ::prac_ros::SrvJdkRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.words);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrvJdkRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prac_ros::SrvJdkRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prac_ros::SrvJdkRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "words: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.words);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRAC_ROS_MESSAGE_SRVJDKREQUEST_H
